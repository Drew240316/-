def solution(rows, columns, queries): # 행의 개수 , 열의 개수 # 회전할 부분의 좌표 리스트  
# rows와 columns 문제의 행과 열(6*6), queries는 회전들의 목록

    # 1씩 증가하는 2차 행렬 만들고, 변수 초기화
    answer = []    #최솟값 넣을 변수
    board = []
    for i in range(rows):
        row = []
        for j in range(columns):
            row.append(i*columns + (j+1))
        board.append(row)
    
    # 2차원 리스트인 쿼리들의 목록만들기 
    for query in queries : 
        a, b, c, d = query[0]-1, query[1]-1, query[2]-1, query[3]-1
    # 문제 입력에서 [[2,2,5,4]....]]는 (2번째 행 2번째 열, 5번째 행, 4번째 열)
    # a는 시작 행의 인덱스 (x1-1)을 가리킴,  a= 1
    # b는 시작 열의 인덱스 (y1-1)을 가리킴, b = 1
    # c는 끝 행의 인덱스 (x2-1)을 가리킴, c = 4
    # d는 끝 열의 인덱스 (y2-1)를 가리킴, d = 3
    
    
    
    # 위에 테두리인, board[1][1:3] = row1 으로, 두번째 행부터 두번째 열부터 3번째 열인 8,9
    # 아래 테두리인, board[4][2:4] = row2 으로, 다섯번째 행 부터, 세번째 열부터 4번째열 27,28  
    # 그리고 8 9 27 28의 리스트 값중에 최솟값 _min 넣기 
        row1, row2 = board[a][b:d], board[c][b + 1:d + 1]
        _min = min(row1 + row2) 
    
    
        for i in range(c, a, -1):       # 4~1 인덱스 범위 반복하되 증감하기(실제로 2의 인덱스까지)
        # 오른쪽 테두리인 [4][3] = [3][3]으로, 네번째 행부터 네번째 열이니깐 22을 28자리에 넣기
        # 오른쪽 테두리인 [3][3] = [2][3]으로, 세번째 행부터,네번째 열이니깐 16을 22자리에 넣기
        # 오른쪽 테두리인 [2][3] = [1][3]으로, 두번째 행부터,네번째 열이니깐 10을 16자리에 넣기
            board[i][d] = board[i - 1][d]
            if board[i][d] < _min: _min = board[i][d] # 현재의 위치값인 10이 _min보다 작으면, _min에 넣으세요
    
        for i in range(a,c):  #1~4 인덱스 범위 반복하기 (실제로 3인덱스 까지)
        # 왼쪽 테두리인 
        # board[1][1] = board[2][1]으로, 세번째행의 두번째 열의값인 20을 두번째행의 두번재 열의값에 넣어라
        # board[2][1] = board[3][1]으로, 네번째행의 두번째 열의값인 26을 두번째행의 두번재 열의값에 넣어라
        # board[3][1] = board[4][1]으로, 다섯번째행의 두번째 열의값인 27을 두번째행의 두번재 열의값에 넣어라 
            board[i][b] = board[i+1][b]
            if board[i][b] < _min : _min = board[i][b] # 현재의 위치값인 27이 _min보다 작으면 _min에 넣어라
    
        # 아래의 코드 줄은 윗줄과 아랫줄의 회전된 값을 행렬에 다시 반영해야되는 코드
        # 이전의 반복문에서는 오른쪽과 왼쪽 테두리의 값만 이동했기 때문에, 윗줄과 아랫줄의 회전된 값은
        # row1과 row2에 저장된 상태이다. 이값들을 다시 board에 반영하지 않으면,회전한 결과가 완전하지 않음
        # board[1][2:4], board[4][1:3]
        board[a][ b+1 : d+1 ], board[c][b:d] = row1, row2
    
    
    # 쿼리 반복할때마다 최솟값 넣기 
        answer.append(_min)   

    return answer
    
    
    
        

